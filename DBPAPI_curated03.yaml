openapi: 3.0.1
info:
  title: Daily Banking Product API
  version: 1.0.28
  description: >-
    This API provides the basic functions needed in the offering discovery process, such as search product offering, retrieve information about specific product offering or parts of it
  contact:
    name: Person
    email: amdocs@nl.abnamro.com
  x-apiType: "enterprise"
servers:
  - url: https://api-st-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ST server
  - url: https://api-et-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ET server
  - url: https://api-pr-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: PR server
paths:
  /{productId}/fulfillment:
    parameters:
      - name: Subject-Token-Type
        in: header
        required: false
        description: specifies the authorisation mechanism
        schema:
          $ref: '#/components/headers/Subject-Token-Type'
      - name: Subject-Token
        in: header
        required: false
        description: the consumer application
        schema:
          $ref: '#/components/headers/Subject-Token'
      - name: Consumer-Id
        in: header
        required: true
        description: the consumer application
        schema:
          $ref: '#/components/headers/Consumer-Id'
      - name: Trace-Id
        in: header
        required: true
        description: the consumer application
        schema:
          $ref: '#/components/headers/Trace-Id'
      - $ref: '#/components/parameters/ProductId'
    get:
      tags:
        - product-offering
      summary: exposes fulfillment attributes
      description: >-
        provides to order management system with the structure of attributes needed for fulfilment process per product engine
      operationId: getDailyBankingProductFulfillmentAttributes
      responses:
        200:
          description: Full set of fulfilment needed attributes split per backend adminstration (product engine)
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFulfillmentParameters'
        401:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Authorization Error"

            Detailed Error List: 
            ---
            - SUBJECT_TOKEN_INVALID
              > Valid subject-token is required.
            - SUBJECT_TOKEN_MISSING
              > The Subject-Token header is required.
            - SUBJECT_TOKEN_TYPE_INVALID
              > The Subject-Token-Type header should be 'MSEC'.
            - SUBJECT_TOKEN_TYPE_MISSING
              > The Subject-Token-Type header is required.
          content: 
            "application/json":
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_TOKEN_MISSING",
                              "message": "The Subject Token header is required.",
                              "traceId": "924bd142-6514-445c-9e01-486820d94263",
                              "status": 401
                             }
                           ]
                  }
        403:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Access Forbidden"

            Detailed Error List: 
            ---
            - SUBJECT_NOT_ALLOWED
              > The Subject (End User) is not allowed to use the specific operation.
          content: 
            "application/json":
              schema:
                $ref: "#/components/schemas/ApplicationCustomError"
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_NOT_ALLOWED",
                              "message": "The Subject (End User) is not allowed to use the specific operation.",
                              "traceId": "6be9522f-ff5f-4932-8243-66c154880a1a",
                              "status": 403
                             }
                           ]
                  }
        404:
          description: The requested offering was not found in our system.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
        500:
          description: >-
            An unexpected error has occurred. The error has been logged and is
            being investigated.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
components:
  responses:
    ServerErrors:
      description: |
        "Server made a Boo-Boo!"

        Detailed Error List:
        ---
        - INTERNAL_SERVER_ERROR
          > Internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationCustomError'
          example:
            {
              errors: [
              {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "Internal server error occurred",
                "traceId": "XX1234",
                "status": 500
              }
              ]
            }
  headers:
    Subject-Token-Type:
      description: "Indicates which type of session the user is logged in. Example: MSEC."
      schema: 
        type: string
        enum:
          - MSEC
          - ENTERPRISE_TOKEN
        example: MSEC
    Subject-Token:
      description: "Unique token identifying the session of the logged in user."
      required: true
      schema: 
        type: string
      example: "VGhpcyBpcyBhIG5pY2UgdGV4dCBlbmNvZGVkIGluIEJhc2U2NA=="
    Consumer-Id:
      description: "Unique value for consumer application calling the API "
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      description: "Unique end-2-end trace id received from the consumer"
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    Accept-Language:
      description: |-
        the list o languages accepted by the consumer; is strongly recommended, otherwise, the default language decided by the backend is provided. If the content is not found in the requested language/s then the content in the 'nl' language is returned for that object(!)
      schema:
        type: string
        example: 'en'
  parameters:
    Consumer-Id:
      in: "header"
      name: "Consumer-Id"
      description: |
        A unique value for consumer applications calling the API
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      name: "Trace-Id"
      in: header
      description: |
        The unique end-2-end trace id received from the consumer
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    ProductId:
      name: "productId"
      in: "path"
      required: true
      description: |
        the identifier of the product offering for which the sales context is requested
      schema:
        type: string
        example: '001294'

  schemas:
    ApplicationCustomError:
      type: object
      required: 
        - "errors"
      properties:
        errors:
          type: array
          minItems: 1 
          maxItems: 5
          description: |
            List of application errors.
          items:
            $ref: '#/components/schemas/ErrorItem'
    ErrorItem:
      type: object
      required:
         - "code"
         - "message"
         - "status"
      properties:
        status:
          type: integer
          description: |
            unique status code identifying the type of issue. Can be filled with the HTTP status code, for example.
        code:
          type: string
          description: |
            Application internal error code.
        traceId:
          type: string
          description: |
            Application internal error trace Id.
        message:
          type: string
          description: |
            Error message, descriptive for the investigating party. For example, for consumer error, it should hint where the request could change to get a successful response.
      description: List of application errors.
    ProductBrief:
      description: |
        a 360 view of the product offering
      type: object
      required: 
        - "productId"
      properties:
        productId:
          type: string
          description: unique id of the offering
          example: "0293853491938"
        productName:
          type: string
          description: |
            localized name of the offering; could be used in front-end
          example: "Future Savings"
        productShortDescription:
          type: string
          description: |
            localized description/short briefing of the offering; could be used in front-end
          example: "Just a place where to keep your money until your kid starts college"
        productDocumentationURL:
          description:  |
            the location of an electronic document (web page, pdf, etc) containing a detailed description of the product offering and/or its terms and conditions
          type: string
          pattern: "url"
          example: 'https://developer-pr-iag.nl.eu.abnamro.com/rest-standards-and-guidelines/yaml-guidelines/#151'
    ProductImplementationBase:
      description: >-
        this is the minimum set of parameters for a base product to be instantiated; the correlation between the attributes set and enforcement of their split toward the correct base administration should be done in the Order Management System. \
          Here is just the definition of what has to be sent for a a Product Offering, per instantiation administration. \
          Currently, most of the administrations are collecting the instantiation parameters from GRV tables. The 'fulfillmentConfigurationId' is the 'GRV-code'. Once the correct set of parameters is identified and agreed, the 'fulfillmentConfigurationId' will become obsolete and replaced with the actual set of parameters, giving the flexibility to separate between various instantiation administrations.
      type: object
      required: 
        - "fulfillmentConfigurationId"
        - "fulfillmentAdministration"
      properties:
        fulfillmentAdministration:
          description: the backend adminsitration that implements a subset of financial services and isntantiate (a part of) an agreement
          type: string
          example: CRC
        fulfillmentConfigurationId:
          description: a minimal code needed by the fulfillment administration to be able to instantiate (a part of) an agreement
          type: string
          example: 42
    AccountingFulfillmentParameters:
      description: all the parameters needed to instantiate the product in Financial Accounting System (FRS)
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      example:
        fulfillmentAdministration: "Financial Accounting Registry (FRS)"
        fulfillmentConfigurationId: "42"
    BillingFulfillmentParameters:
      description: all the parameters needed to instantiate the product in Generiek Tariferen (GT). \
        
        Currently, GT is collecting the instantiated products from P&C and does not participate in the fulfillment process.
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      properties:
        productId:
          description: good old plain product id from CRC/P&C, in six-digits-left-zero-padded-format; could be obsoleted in the future, in favour of 'price-plan id'
          type: string
          pattern: '\d{6}'
          example: '001249'
      example:
        fulfillmentAdministration: "Generiek Tariferen (RQR)"
        fulfillmentConfigurationId: "42"
        productId: "001290"
    InterestFulfillmentParameters:
      description: all the parameters needed to instantiate the product in Interest Calculation (RQR) \
        
        The minumum configuration item expected for most of the products in RQR would be the 'interest code'
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      example:
        fulfillmentAdministration: "Interest Calculation (RQR)"
        fulfillmentConfigurationId: "42"
    BundlingFulfillmentParameters:
      description: all the parameters needed to instantiate the product in Interest Calculation (RQR) \
        
        The minumum configuration item expected for most of the products in APA would be the 'product bundle id\'
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      properties:
        productBundleId:
          description: APA's internal bundle type id
          type: string
          pattern: '\d{4}'
          example: 1000
      example:
        fulfillmentAdministration: "Agreement Packaging Administration"
        fulfillmentConfigurationId: "42"
        productBundleId: 1000
    LimitsFulfillmentParameters:
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      example:
        fulfillmentAdministration: "Limits"
        fulfillmentConfigurationId: "42"
    CashAndCardsFulfillmentParameters:
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      example:
        fulfillmentAdministration: "Cash And Cards"
        fulfillmentConfigurationId: "42"
    CoreBankingFulfillmentParameters:
      allOf:
        - $ref: '#/components/schemas/ProductImplementationBase'
      example:
        fulfillmentAdministration: "Core Rekening Currant (CRC)"
        fulfillmentConfigurationId: "42"
    ProductFulfillmentParameters:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/AccountingFulfillmentParameters'
          - $ref: '#/components/schemas/BillingFulfillmentParameters'
          - $ref: '#/components/schemas/InterestFulfillmentParameters'
          - $ref: '#/components/schemas/BundlingFulfillmentParameters'
          - $ref: '#/components/schemas/LimitsFulfillmentParameters'
          - $ref: '#/components/schemas/CoreBankingFulfillmentParameters'
          - $ref: '#/components/schemas/CashAndCardsFulfillmentParameters'
externalDocs:
  description: please read more about the requirements and solution
  url: https://confluence.int.abnamro.com/display/GT/Catalog+for+Commerce
