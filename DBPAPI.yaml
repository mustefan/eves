openapi: 3.0.1
info:
  title: Daily Banking Product API
  version: 1.0.28
  description: >-
    This API provides the basic functions needed in the offering discovery process, such as search product offering, retrieve information about specific product offering or parts of it
  contact:
    name: Person
    email: amdocs@nl.abnamro.com
  x-apiType: "enterprise"
servers:
  - url: https://api-st-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ST server
  - url: https://api-et-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ET server
  - url: https://api-pr-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: PR server
paths:
  /:
    get:
      tags:
        - product-offering
      operationId: getDailyBankingProductList
      summary: retrieves commercial product offerings based on the search criterion
      description: |-
        The operation returns all commercial product offerings that match the given criteria in the input regardless of qualification rules (but qualification can be expressed as a search criterion). For localized information, the operation returns only the entries matching the 'Accept-Language' header or the default language if none is specified.\
          Filtering values are combined in the OR operation
      parameters:
        - name: Subject-Token-Type
          in: header
          required: false
          description: specifies the authorisation mechanism
          schema:
            $ref: '#/components/headers/Subject-Token-Type'
        - name: Subject-Token
          in: header
          required: false
          description: the consumer application
          schema:
            $ref: '#/components/headers/Subject-Token'
        - name: Consumer-Id
          in: header
          required: true
          description: the consumer application
          schema:
            $ref: '#/components/headers/Consumer-Id'
        - name: Trace-Id
          in: header
          required: true
          description: the consumer application
          schema:
            $ref: '#/components/headers/Trace-Id'
        - name: Accept-Language
          in: header
          description: the consumer application
          schema:
            $ref: '#/components/headers/Accept-Language'
        - name: businessLine
          in: query
          description: further refinement of the products within given category
          schema:
            type: string
            enum:
              - RETAIL
              - MEES_PIERSON
              - SMALL_AND_MEDIUM_ENTERPRISES
              - LARGE_CORPORATES
              - INTERNATIONAL_BANKING
          style: form
          explode: false
          example: RETAIL
        - name: productLine
          in: query
          description: Basic split of banking products
          schema:
            type: string
            enum:
              - SAVINGS
              - PAYMENTS
              - INSURANCES
              - CASH
              - CREDITS
              - SECURITIES
              - PENSIONS
              - ADVICES
              - MONEY_MARKETS
              - MORTGAGES
              - LOANS
          style: form
          explode: false
          example: SAVINGS
        - name: productLineCategory
          in: query
          description: |
            further split of banking products within the product line; the actual set of values depends on the product line \
              Be advised, this is not free text. Please check with the Catalogue administration before using it. \
              For SAVINGS the relevant categories would be: \
                - COMMERCIAL_CUSTOMIZED_SAVINGS_ACCOUNTS \
                - COMMERCIAL_STANDARD_SAVINGS_ACCOUNTS \
                - INVESTMENT_SAVING_ACCOUNTS \
                - STANDARD_SAVINGS_ACCOUNTS \
                - CHILDRENS_SAVINGS_ACCOUNTS \
                - CUSTOMIZED_SAVINGS_ACCOUNTS \
                - INTERNATIONAL_STANDARD_SAVINGS_ACCOUNTS
                
              @TODO:\
                Add reference documentation about the values and their correlation with the productLine values above and their maintenance process
          schema:
            type: string
          style: form
          explode: false
          example: INVESTMENT_SAVING_ACCOUNTS
        - name: productsGroup
          in: query
          description: >-
            Banking product grouped by appearance type
          schema:
            type: string
            enum:
              - PAYMENT_INSTRUMENTS
              - SAVINGS_ACCOUNTS
              - ACCESS_INSTRUMENTS
              - STATEMENTS_AND_REPORTS
              - INSURED_SERVICES
          style: form
          explode: false
        - name: country
          in: query
          description: >-
            three letters country code of the country where the product is sold, in ISO 3166 format. A special country code 'SEP' is used for aggregating the SEPA member countries.
          schema:
            type: string
            pattern: '[A-Z]{3}'
          style: form
          explode: false
        - name: "customerId"
          description: >-
            non-mandatory parameter; if known then the result will be filtered to match only product offering for which the given customer is eligible
          schema:
            type: string
          in: query
          example: 002468097531
      responses:
        200:
          description: Full set of product offering terms and conditions
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsList'
        400:
          description: parameter incorrect.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
        401:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Authorization Error"

            Detailed Error List: 
            ---
            - SUBJECT_TOKEN_INVALID
              > Valid subject-token is required.
            - SUBJECT_TOKEN_MISSING
              > The Subject-Token header is required.
            - SUBJECT_TOKEN_TYPE_INVALID
              > The Subject-Token-Type header should be 'MSEC'.
            - SUBJECT_TOKEN_TYPE_MISSING
              > The Subject-Token-Type header is required.
          content: 
            "application/json":
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_TOKEN_MISSING",
                              "message": "The Subject Token header is required.",
                              "traceId": "924bd142-6514-445c-9e01-486820d94263",
                              "status": 401
                             }
                           ]
                  }
        403:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Access Forbidden"

            Detailed Error List: 
            ---
            - SUBJECT_NOT_ALLOWED
              > The Subject (End User) is not allowed to use the specific operation.
          content: 
            "application/json":
              schema:
                $ref: "#/components/schemas/ApplicationCustomError"
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_NOT_ALLOWED",
                              "message": "The Subject (End User) is not allowed to use the specific operation.",
                              "traceId": "6be9522f-ff5f-4932-8243-66c154880a1a",
                              "status": 403
                             }
                           ]
                  }
        406:
          description: |
            not acceptable. this will not be implemented as the service will always return the Dutch version in case the language requested is not understood or cannot be served
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
        500:
          description: >-
            An unexpected error has occurred. The error has been logged and is
            being investigated.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
components:
  responses:
    ServerErrors:
      description: |
        "Server made a Boo-Boo!"

        Detailed Error List:
        ---
        - INTERNAL_SERVER_ERROR
          > Internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationCustomError'
          example:
            {
              errors: [
              {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "Internal server error occurred",
                "traceId": "XX1234",
                "status": 500
              }
              ]
            }
  headers:
    Subject-Token-Type:
      description: "Indicates which type of session the user is logged in. Example: MSEC."
      schema: 
        type: string
        enum:
          - MSEC
          - ENTERPRISE_TOKEN
        example: MSEC
    Subject-Token:
      description: "Unique token identifying the session of the logged in user."
      required: true
      schema: 
        type: string
      example: "VGhpcyBpcyBhIG5pY2UgdGV4dCBlbmNvZGVkIGluIEJhc2U2NA=="
    Consumer-Id:
      description: "Unique value for consumer application calling the API "
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      description: "Unique end-2-end trace id received from the consumer"
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    Accept-Language:
      description: |-
        the list o languages accepted by the consumer; is strongly recommended, otherwise, the default language decided by the backend is provided. If the content is not found in the requested language/s then the content in the 'nl' language is returned for that object(!)
      schema:
        type: string
        example: 'en'
  parameters:
    Consumer-Id:
      in: "header"
      name: "Consumer-Id"
      description: |
        A unique value for consumer applications calling the API
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      name: "Trace-Id"
      in: header
      description: |
        The unique end-2-end trace id received from the consumer
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    ProductId:
      name: "productId"
      in: "path"
      required: true
      description: |
        the identifier of the product offering for which the sales context is requested
      schema:
        type: string
        example: '001294'

  schemas:
    ApplicationCustomError:
      type: object
      required: 
        - "errors"
      properties:
        errors:
          type: array
          minItems: 1 
          maxItems: 5
          description: |
            List of application errors.
          items:
            $ref: '#/components/schemas/ErrorItem'
    ErrorItem:
      type: object
      required:
         - "code"
         - "message"
         - "status"
      properties:
        status:
          type: integer
          description: |
            unique status code identifying the type of issue. Can be filled with the HTTP status code, for example.
        code:
          type: string
          description: |
            Application internal error code.
        traceId:
          type: string
          description: |
            Application internal error trace Id.
        message:
          type: string
          description: |
            Error message, descriptive for the investigating party. For example, for consumer error, it should hint where the request could change to get a successful response.
      description: List of application errors.
    ProductsList:
      type: object
      required: 
        - "products"
      properties:
        products:
          type: array
          minItems: 0
          maxItems: 2000
          items:
            $ref: '#/components/schemas/ProductBrief'
    ProductBrief:
      description: |
        a 360 view of the product offering
      type: object
      required: 
        - "productId"
      properties:
        productId:
          type: string
          description: unique id of the offering
          example: "0293853491938"
        productName:
          type: string
          description: |
            localized name of the offering; could be used in front-end
          example: "Future Savings"
        productShortDescription:
          type: string
          description: |
            localized description/short briefing of the offering; could be used in front-end
          example: "Just a place where to keep your money until your kid starts college"
        productDocumentationURL:
          description:  |
            the location of an electronic document (web page, pdf, etc) containing a detailed description of the product offering and/or its terms and conditions
          type: string
          pattern: "url"
          example: 'https://developer-pr-iag.nl.eu.abnamro.com/rest-standards-and-guidelines/yaml-guidelines/#151'
externalDocs:
  description: please read more about the requirements and solution
  url: https://confluence.int.abnamro.com/display/GT/Catalog+for+Commerce
