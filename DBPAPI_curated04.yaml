openapi: 3.0.1
info:
  title: Daily Banking Product API
  version: 1.0.28
  description: >-
    This API provides the basic functions needed in the offering discovery process, such as search product offering, retrieve information about specific product offering or parts of it
  contact:
    name: Person
    email: amdocs@nl.abnamro.com
  x-apiType: "enterprise"
servers:
  - url: https://api-st-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ST server
  - url: https://api-et-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: ET server
  - url: https://api-pr-iag.nl.eu.abnamro.com/daily-banking/products/v1
    description: PR server
paths:
  /{productId}/eligibility-check:
    parameters:
      - name: Subject-Token-Type
        in: header
        required: false
        description: specifies the authorisation mechanism
        schema:
          $ref: '#/components/headers/Subject-Token-Type'
      - name: Subject-Token
        in: header
        required: false
        description: the consumer application
        schema:
          $ref: '#/components/headers/Subject-Token'
      - name: Consumer-Id
        in: header
        required: true
        description: the consumer application
        schema:
          $ref: '#/components/headers/Consumer-Id'
      - name: Trace-Id
        in: header
        required: true
        description: the consumer application
        schema:
          $ref: '#/components/headers/Trace-Id'
      - $ref: '#/components/parameters/ProductId'
    post:
      tags: 
        - product-offering
      summary: verifies if customer qualifies for the given product
      operationId: checkDailyBankingProductEligibility
      description: >-
        the operation performs a deep eligibility check, including the qualification rules involving operational data, such as the presence of a current account or limitations regarding the number of savings products.
      requestBody:
        description: "the customer identification"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Customer"
            example: 
              identificationType: BC_ID
              id: 0002468097531
                     
      responses:
        204:
          description: "customer is eligible for yet another instance of the requested product; no further content is provided"
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
        400:
          description: >-
            not eligible
            returned in one of the situations below; please check the error message for details: 
              * the customer is not eligible for (yet another instance of) the requested offering 
              * the customer cannot be found in the operational data 
              * the customer parameters are insufficient for assessing the eligibility 
              * some of the downstream systems do not respond and the eligibility cannot be assessed w/o the related data
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
        401:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Authorization Error"

            Detailed Error List: 
            ---
            - SUBJECT_TOKEN_INVALID
              > Valid subject-token is required.
            - SUBJECT_TOKEN_MISSING
              > The Subject-Token header is required.
            - SUBJECT_TOKEN_TYPE_INVALID
              > The Subject-Token-Type header should be 'MSEC'.
            - SUBJECT_TOKEN_TYPE_MISSING
              > The Subject-Token-Type header is required.
          content: 
            "application/json":
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_TOKEN_MISSING",
                              "message": "The Subject Token header is required.",
                              "traceId": "924bd142-6514-445c-9e01-486820d94263",
                              "status": 401
                             }
                           ]
                  }
        403:
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          description: |
            "Access Forbidden"

            Detailed Error List: 
            ---
            - SUBJECT_NOT_ALLOWED
              > The Subject (End User) is not allowed to use the specific operation.
          content: 
            "application/json":
              schema:
                $ref: "#/components/schemas/ApplicationCustomError"
              example:
                  {
                   errors: [
                             {
                              "code": "SUBJECT_NOT_ALLOWED",
                              "message": "The Subject (End User) is not allowed to use the specific operation.",
                              "traceId": "6be9522f-ff5f-4932-8243-66c154880a1a",
                              "status": 403
                             }
                           ]
                  }
        404:
          description: The requested offering was not found in our system.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
        500:
          description: >-
            An unexpected error has occurred. The error has been logged and is
            being investigated.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCustomError'
components:
  responses:
    ServerErrors:
      description: |
        "Server made a Boo-Boo!"

        Detailed Error List:
        ---
        - INTERNAL_SERVER_ERROR
          > Internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationCustomError'
          example:
            {
              errors: [
              {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "Internal server error occurred",
                "traceId": "XX1234",
                "status": 500
              }
              ]
            }
  headers:
    Subject-Token-Type:
      description: "Indicates which type of session the user is logged in. Example: MSEC."
      schema: 
        type: string
        enum:
          - MSEC
          - ENTERPRISE_TOKEN
        example: MSEC
    Subject-Token:
      description: "Unique token identifying the session of the logged in user."
      required: true
      schema: 
        type: string
      example: "VGhpcyBpcyBhIG5pY2UgdGV4dCBlbmNvZGVkIGluIEJhc2U2NA=="
    Consumer-Id:
      description: "Unique value for consumer application calling the API "
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      description: "Unique end-2-end trace id received from the consumer"
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    Accept-Language:
      description: |-
        the list o languages accepted by the consumer; is strongly recommended, otherwise, the default language decided by the backend is provided. If the content is not found in the requested language/s then the content in the 'nl' language is returned for that object(!)
      schema:
        type: string
        example: 'en'
  parameters:
    Consumer-Id:
      in: "header"
      name: "Consumer-Id"
      description: |
        A unique value for consumer applications calling the API
      required: true
      schema:
        type: string
        example: "DCPB"
    Trace-Id:
      name: "Trace-Id"
      in: header
      description: |
        The unique end-2-end trace id received from the consumer
      required: true
      schema:
        type: string
        example: "16258284-86af-4d65-8cc9-6b4a471f0207"
    ProductId:
      name: "productId"
      in: "path"
      required: true
      description: |
        the identifier of the product offering for which the sales context is requested
      schema:
        type: string
        example: '001294'

  schemas:
    Customer:
      type: object
      oneOf:
        - $ref: "#/components/schemas/CustomerIdentification"
        - $ref: "#/components/schemas/CustomerCharacteristics"
    CustomerIdentification:
      type: object
      description: |
        customer BC ID or party id
      required: 
        - "id"
      properties:
        identificationType:
          description: |- 
            the type of customer identifier. this refers to the customer's representation identifier within the financial institution's registry, not to the civil or social identification
          type: string
          default: BC_ID
          example: BC_ID
          enum: 
            - PARTY_ID
            - BC_ID
            - EXTERNAL
        id:
          description: >-
            customer's representation identifier within the financial institution's registry
          type: string
          example: 000123456789
      example: 
        identificationType: BC_ID
        id: 0002468097531
    CustomerCharacteristics:
      type: object
      description: |-
        an avatar that holds all the attributes needed for assessing the eligibility of a customer \
          be advised that there is no operational data attached to the avatar so only the session data can be used
      required: 
        - "relationCategory"
      properties:
        relationCategory:
          type: string
          pattern: '\d{2}'
          description: zero left padded relation category
          example: "14"
        clientGroupCode:
          type: string
          pattern: '\d{4}'
          description: |
            zero left padded client group code
          example: "0456"
        age:
          type: integer
          description: |
            the age of the (avatar) customer in years
          example: 108
        customerLifeCycleStatus:
          description: |-
            the status of the customer is mapped to the known registration status codes in BCDB (e.g. a customer having an account with AAB is in registration status 4)
               - ACTIVE = the customer is known to the bank and it has active agreeemnt/s
               - PROSPECTIVE = the customer did not pass through the onboarding process but shows interest to purchase financial services/products
               - SUSPENDED = the customer does not have active agreements with the bank but did not express the wish to terminate business with the financial institution
               - TERMINATED = the customer does not have an active agreement with the financial institution and there is no wish for the collaboration to continue.
          type: string
          default: ACTIVE
          example: ACTIVE
          enum: 
            - ACTIVE
            - PROSPECTIVE
            - SUSPENDED
            - TERMINATED
        financialRiskScore:
          description: |
            the financial risk assessment score; a.k.a KYCScore
          type: integer
          example: 48
        financialRiskReassessmentDate:
          description: |
            when the financial risk will be reassessed. a.k.a. KYC Reassessment Date
          type: string
          format: date
          example: "2019-12-11"
        debtorStatus:
          description: |-
            shows if the customer has unpaid debts over to the financial institution and if so, which is the collection status. a.k.a. "Flanderijn status"
              - N_A = the customer has no known debts to the financial institution
              - POINT_OF_NO_RETURN = the customer has old debts with the financial institution and the institution intends to initiate legal collection of the debts
              - FLAGGED = the customer has recent debts with the financial institution and the institution intends to amiably pursue debt collection
          type: string
          enum:
            - N_A
            - POINT_OF_NO_RETURN
            - FLAGGED
    ApplicationCustomError:
      type: object
      required: 
        - "errors"
      properties:
        errors:
          type: array
          minItems: 1 
          maxItems: 5
          description: |
            List of application errors.
          items:
            $ref: '#/components/schemas/ErrorItem'
    ErrorItem:
      type: object
      required:
         - "code"
         - "message"
         - "status"
      properties:
        status:
          type: integer
          description: |
            unique status code identifying the type of issue. Can be filled with the HTTP status code, for example.
        code:
          type: string
          description: |
            Application internal error code.
        traceId:
          type: string
          description: |
            Application internal error trace Id.
        message:
          type: string
          description: |
            Error message, descriptive for the investigating party. For example, for consumer error, it should hint where the request could change to get a successful response.
      description: List of application errors.
externalDocs:
  description: please read more about the requirements and solution
  url: https://confluence.int.abnamro.com/display/GT/Catalog+for+Commerce
